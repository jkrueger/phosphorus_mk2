
shader
refraction_bsdf_node
  [[ string help = "Refraction BSDF shader" ]]
(
  string distribution = "ggx"
    [[ string help = "The microfacet distribution to use",
       string widget = "popup",
       string options = "sharp|ggx" ]],

  color Cs = 1
    [[  string help = "Base color",
        float min = 0, float max = 1 ]],

  normal shadingNormal = N
    [[ string help = "The normal used for shading calculations" ]],

  float IoR = 0.5
    [[  string help = "Index of Refraction. used for transmissive glossy BSDFs" ]],

  float roughness = 0
    [[  string help = "Roughness of the material, for glossy refraction",
        float min = 0, float max = 1 ]],

  output closure color Cout = 0
    [[ string help = "Output color" ]]
)
{
  // float r = roughness * roughness;p
  float r = roughness;
  float f = max(IoR, 1e-5);
  float eta = IoR; // backfacing() ? 1.0 / f : f;

  if (distribution == "sharp" || roughness == 0.0) {
    Cout = Cs * refraction(shadingNormal, eta);
  }
  else {
    Cout = Cs * microfacet(distribution, shadingNormal, vector(0), r, r, eta, 1);
  }
}
