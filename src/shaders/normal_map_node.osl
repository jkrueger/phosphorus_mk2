
shader
normal_map_node
 [[ string help = "Transform the input normal using a normal map" ]]
(
  color sample = 0
    [[ string help = "Normal map sample" ]],

  float strength = 0.5
    [[ string help = "Strength of the perturbation" ]],

  output normal Normal = 0
    [[ string help = "Output color" ]]
)
{
  vector tangent;
  color scaled = 2.0 * color(sample[0] - 0.5, sample[1] - 0.5, sample[2] - 0.5);

  if (getattribute("geom:tangent", tangent)) {
    vector cotangent = cross(N, tangent);
    // compute new normal
    Normal = normalize(scaled[0] * tangent + scaled[1] * cotangent + scaled[2] * N);
  }
  else {
    Normal = normal(0, 0, 0);
  }

  // normal N2 = normalize(N + (N - Normal) * max(strength, 0.0));

  // printf("%f, %f, %f\n", N, Normal, N2);

  // modify original normal given the input strength
  Normal = normalize(N + (N - Normal) * max(strength, 0.0));
}
